//////////////////////////////////////////////////////////////////////////////////////////////////////////
// MpgLogger module
//////////////////////////////////////////////////////////////////////////////////////////////////////////
export enum MpgErrorCodes {
    UnknownError = 'Unknown Error'
}
export enum MpgLoggingMode {
    dev = 'Development',
    debug = 'Debug',
    prod = 'Production'
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
// MpgError
//////////////////////////////////////////////////////////////////////////////////////////////////////////
export class MpgError extends Error {
    code: MpgErrorCodes
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    // constructor
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    constructor (msg: string, code=MpgErrorCodes.UnknownError){
        super(msg)
        this.code = code
    }
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
// MpgLog class
//////////////////////////////////////////////////////////////////////////////////////////////////////////
export class MpgLogger {
    mode: MpgLoggingMode
    handleFatalError: Function
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    // constructor
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    constructor (handleFatalAppError: Function) {
        this.handleFatalError = handleFatalAppError
        this. mode = MpgLoggingMode.dev
    }
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    // set logging mode
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    setLoggingMode = (mode: MpgLoggingMode)=>{
        this.mode = mode
    }
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    // error
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    error = (err: MpgError) => {
        console.log("MpgLog: error: code:",err.code,", message:",err.message,", stack trace:",err.stack);
    }
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    // debug
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    debug = (...objects: any) => {
        if(this.mode == MpgLoggingMode.debug){
            console.log("MpgLogger: time:",new Date(),": debug content:",objects)
        }
    }
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    // fatal error
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    fatalError = (msg: string, err: MpgError)=>{
        this.debug(msg,err)
        this.handleFatalError(msg, err)
    }
} 